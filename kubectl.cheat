% kubectl, kubernetes, k, k8s

#alias k="kubectl"

##############
##Apply
##############

# Apply
k apply -f <spec.yml> --record

##############
##Auth
##############

# Check what human user authorized to do
k auth auth can-i <subcommand> <resource> --as <optional_username>

# Check what service user authorized to do
k auth can-i <subcommand> <resource> --as system:serviceaccount:<namespace>:<service_user_name> -n <target_namespace>

##############
##Certificate
##############

# Approve a certificate signing request. CSR.
k certificate approve <csr_name>

##############
##Create
##############

# Create resources / pod described in .yml
k create -f <file.yml>

# Create a new ClusterIP service
k create service clusterip <svc_name> --tcp=<port>:<targetPort>

# Create namespace
k create namespace <name>

##############
##Config
##############

# View Kubectl config file
k config view

# Switch default namespace
k config set-context --curent --namespace=<some_namespace>

##############
##Delete
##############

# Delete/remove any resources
k delete -f <spec.yml>

# Delete service
k delete svc <name>

# Delete pod
k delete pod <name>

##############
##Describe
##############

# Describe. Get all information about pod
k describe pod <name>

# Describe service
k describe svc <name>

# Describe cluster role
k describe clusterrole <name>

# Describe cluster role binding
k describe clusterrolebinding <name>

# Describe service account
k describe serviceaccount <name>

##############
##Dry-Runs
##############

# Dry-run for service.
k create service <svc_type> <svc_name> --tcp=<port>:<targetPort> --dry-run=client -o yaml > svc_dry_run.yaml

# Dry-run for deployment.
k create deployment <d_name> --image=<name>:<version_optional> --port=<port> --replicas=<how_many> --dry-run=client -o yaml > dpl_dry_run.yaml

# Dry-run ingress.
k create ingress <name> --rule=host/path=service:port --dry-run=client -o yaml > ingress_dry_run.yaml

# Dry-run cluster role.
k create clusterrole <name> --verb=get,list,create,update,delete --resource=<resource_that_the_rule_applies_to> --dry-run=client -o yaml > clusterrole_dry_run.yml

# Dry-run ClusterRoleBinding
k create clusterrolebinding <name> --clusterrole=<existing_clusterrole_name> --user=<name> --dry-run=client -o yaml > crb_dry_run.yml

# Dry-run ServiceAccount
k create serviceaccount <name> --dry-run=client -o yaml > sa_dry_run.yml

# Dry-run Role
k create role <name> --verb=get,list,create,update,delete --resource=<resource_that_the_rule_applies_to> --dry-run=client -o yaml > role_dry_run.yml

# Dry-run pod
k run <name> --image=<name>:<version_optional> --labels="key=value, key=value" --dry-run=client -o yaml > pod_dry_run.yml


##############
##Exec
##############

# Execute command. Optionally selecting container
k exec <pod_name> --container <cont_name> -- <command>

# Go inside pod. Go inside container
k exec -it <pod_name> --container <cont_name> -- bash

# Get keyset stored in etcd
k exec etcd-master -n kube-system etcdctl get / --prefix -keys-only

##############
##Get
##############

# Get all nodes
k get nodes -o wide

# Watch nodes continuously
k get nodes -w

# Get all namespaces
k get all --all-namespaces

# Get all resources
k get all -o wide --show-labels

# Get deployed resources based on specification
k get -f <spec.yml> -o wide --show-labels

# Get all ReplicaSets
k get rs -o wide --show-labels

# Get services
k get svc -o wide --show-labels

# Get ingress
k get ing

# Get deployments
k get deployments -o wide --show-labels

# Get all pods
k get pods -n <namespace_name> -o wide --show-labels

# Get all information about pods
k get pods -o yaml

# Get pods behind the service
k get ep <service_name> -o yaml --show-labels

# Get pods IPs behind the service
k get ep

# Get namespaces
k get ns

# Get endpoints
k get ep --show-labels

# Get the whole config file
k get <k8s_component> <name> -o yaml

# Filter by label
k get <k8s_component> -l <key_eq_value>

# Get certificate signing requests. CSR.
k get csr

# Get cluster roles
k get clusterrole

# Get cluter role binding
k get clusterrolebinding

# Get secrets
k get secret

# Get secret token
k get secret <name> -o yaml

# Get persistence volume
k get pv

# Get persistence volume claim
k get pvc

# Get networkpolicy
k get networkpolicy -n <namespace>

# Filter k8s resources by label
k get <k8s_resource> --selector <label_key>=<label_val>

##############
##Custom Columns
##############

# Get containers names within a pod
k get pod <name> -o custom-columns=CONTAINER_NAME:.spec.containers[*].name

# Get pod names, IPs, and startTime with jsonpath
k get pod -o custom-columns=POD_NAME:.metadata.name,POD_IP:.status.podIP,CREATED_AT:.status.startTime

##############
##Label
##############

# Label a node
k label node <name> <label_key>=<label_value> --record=true

##############
##Logs
##############

# Get logs from the pod. Optionally container
k logs --follow <pod_name> --container <container_name>

# Get logs from pod replicas by label
k logs -l <key_eq_value>

##############
##Maintenance
##############

# Drain node in preparation for maintenance
k drain <node_name>

# Mark node as schedulable
k uncordon <node_name>

# Mark node as unschedulable (won't drain pods)
k cordon <node_name>

##############
##Rollout
##############

# Roll back deployment to previous release
k rollout undo deployment/<name>

# Get deployment roll out history
k rollout history deployments/<name>

# Check deployment roll out status
k rollout status deployments<name>

# Restart deployment or stateful set
k rollout restart deployment/<name>

##############
##Run
##############

# Launch a pod
k run <name> --image=<image_name>

##############
##Scale
##############

# Scale deployment
k scale deployment <name> --replicas <how_many> --record

##############
##Taint
##############

# Taint a node. (taint-effect -> what happen to POD that DO NOT TOLERATE this taint)
k taint nodes <node_name> <key>=<value>:<taint_effect>

# Remove a taint from a node
k taint nodes <node_name> <key>=<value>:<taint_effect>-

##############
##Troubleshooting
##############

# Is Service forwarding the requests. Is Pod registered with service
k describe svc <service_name>

# Is Service accessible
nc <service_ip> <port>

# Check Application Logs
k logs <pod_name>

# Check Pod Status and recent events
k describe pod <name>

# Show metrics for nodes
k top node

# Show metrics for pods
k top pod

# Get Pods with no explicit resources definitions
k get pod -o jsonpath="{range .items[*]}{.metadata.name}{.spec.containers[*].resources}{'\n'}"

# Check open ports
k exec <source_pod> -- sh -c 'nc -v <destination_pod_ip> <port>' 

# Debug with busybox pod
k run debug-pod --image=busybox

##############
##Version
##############

# Get version information
k version --output=yaml